0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.10.10
3 info using node@v7.3.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/jekyll/Documents/Projects/node-hg-plus',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/jekyll/.npm/hg/0.5.0/package.tgz not in flight; packing
9 verbose correctMkdir /home/jekyll/.npm correctMkdir not in flight; initializing
10 info lifecycle hg@0.5.0~prepublish: hg@0.5.0
11 silly lifecycle hg@0.5.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/jekyll/.npm/hg/0.5.0/package.tgz',
12 verbose tar pack   '/home/jekyll/Documents/Projects/node-hg-plus' ]
13 verbose tarball /home/jekyll/.npm/hg/0.5.0/package.tgz
14 verbose folder /home/jekyll/Documents/Projects/node-hg-plus
15 verbose addLocalTarball adding from inside cache /home/jekyll/.npm/hg/0.5.0/package.tgz
16 verbose correctMkdir /home/jekyll/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd hg@0.5.0
18 verbose afterAdd /home/jekyll/.npm/hg/0.5.0/package/package.json not in flight; writing
19 verbose correctMkdir /home/jekyll/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/jekyll/.npm/hg/0.5.0/package/package.json written
21 silly publish { name: 'hg',
21 silly publish   version: '0.5.0',
21 silly publish   description: 'A Mercurial client for Node',
21 silly publish   main: 'index.js',
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/jdalrymple/node-hg-plus.git' },
21 silly publish   keywords: [ 'mercurial', 'hg', 'client' ],
21 silly publish   author:
21 silly publish    { name: 'Justin Dalrymple',
21 silly publish      email: 'justin.s.dalrymple@gmail.com' },
21 silly publish   license: 'MIT',
21 silly publish   scripts:
21 silly publish    { nsp: 'nsp check',
21 silly publish      '_deps-check': 'npm-check-updates --error-level 2 with --semverLevel major',
21 silly publish      lint: 'eslint -f unix .',
21 silly publish      pretest: 'npm run lint && npm run nsp && npm run _deps-check',
21 silly publish      test: 'node ./node_modules/istanbul/lib/cli.js cover ./node_modules/tape/bin/tape tests/**/*.js',
21 silly publish      coverall: 'cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js' },
21 silly publish   devDependencies:
21 silly publish    { 'babel-eslint': '^7.1.1',
21 silly publish      'babel-preset-latest': '^6.16.0',
21 silly publish      coveralls: '^2.11.15',
21 silly publish      eslint: '^3.14.0',
21 silly publish      'eslint-config-airbnb': '^14.0.0',
21 silly publish      'eslint-plugin-import': '^2.2.0',
21 silly publish      'eslint-plugin-jsx-a11y': '^3.0.2',
21 silly publish      'eslint-plugin-react': '^6.9.0',
21 silly publish      istanbul: '^0.4.5',
21 silly publish      'npm-check-updates': '^2.8.9',
21 silly publish      nsp: '^2.6.2',
21 silly publish      tape: '^4.6.3' },
21 silly publish   dependencies:
21 silly publish    { 'blue-tape': '^1.0.0',
21 silly publish      bluebird: '^3.4.6',
21 silly publish      'child-process-promise': '^2.2.0',
21 silly publish      'fs-extra-promise': '^0.4.1',
21 silly publish      'is-there': '^4.3.6',
21 silly publish      shortid: '^2.2.6',
21 silly publish      winston: '>= 0.5.0' },
21 silly publish   readme: '[![Coverage Status](https://coveralls.io/repos/github/jdalrymple/node-hg-plus/badge.svg?branch=master)](https://coveralls.io/github/jdalrymple/node-hg-plus?branch=master) [![Build Status](https://travis-ci.org/jdalrymple/node-hg-plus.svg?branch=master)](https://travis-ci.org/jdalrymple/node-hg-plus) [![Dependency Status](https://david-dm.org/jdalrymple/node-hg-plus/status.svg)](https://david-dm.org/jdalrymple/node-test#info=dependencies) [![devDependency Status](https://david-dm.org/jdalrymple/node-hg-plus/dev-status.svg)](https://david-dm.org/jdalrymple/node-test#info=devDependencies)\n\n# node-hg-plus\n=======\n\nA node js client for [Mercurial](http://mercurial.selenic.com).\n\nSupported node version => 6.0.0\n\n## Installation\n\n\tnpm install -S hg-plus\n\nTo use the gitify function, you must also have python2.7.x installed as well as the shipped gitifyhg python addon. \nTo install the addon simply run: \n\n\tcd node_modules/hg-plus/utils/gitifyhg/\n\tpython2.7 setup.py install\n\t\nNote this feature currently has mixed results on windows. Working on fixing that functionality for the next release.\n\n\n## Usage\n### Basic\n```javascript\nconst Hg = require(\'hg-plus\');\n\nlet repo = Hg.clone(\'my/repository/url\');\n\nrepo.add()\n.then(() => repo.commit(\'my example commit\'))\n.then(() => repo.push({password: \'myPassword\',username:\'username\'}))\n\n```\n\n### Pushing repository\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\nlet repo = Hg.create(let to = {url: \'my/repository/url\', username: \'user\', password: \'pass\', path: \'path\'});\n\nrepo.push()\n\n```\n\n### Cloning from multiple repositories into a new one\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\nlet combinedRepo = Hg.clone([\'my/repository/url1\', \'my/repository/url2\', \'my/repository/url3\']);\n\ncombinedRepo.commit(\'I just created a repository from three other repositories!\'))\n.then(() => repo.push({password: \'myPassword\',username:\'username\'}))\n\n```\n\n\n## API\n\nSupports both Promises and Standard callbacks following this structure\n\n```javascript\nPromise\n.then(()=>{\n\t\n})\n.catch((error)=>{\n\t\n});\n\nCallback((error, output)=>{\n\t\n})\n\n```\n\n### **Hg**\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Hg Instance            |                  |\n\n\n*Example*\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\n```\n\n### Hg.setPythonPath(path)\n\n| Argument      | Description           | Type      | Required | Default           |\n|---------------|-----------------------|-----------|----------|-------------------|\n| path    | Path of python 2.7 installation. This is used for the gitify function | String    | No       | \'python\' |\n\n*Example*\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\nHg.setPythonPath(\'python\');\n\n```\n\n### Hg.clone(from, [to], [done])\n\nClones a Mercurial repository.\n\n| Argument      | Description           | Type     | Required | Default           |\n|---------------|-----------------------|----------|----------|-------------------|\n| from          |                       | String   | Yes      |                   |\n| to            |                       | Object   | No       |                   |\n| to.url        |                       | String   | No       | null              |\n| to.username   |                       | String   | No       | null              |\n| to.password   |                       | String   | No       | null              |\n| to.path       |                       | String   | No       | Current Directory |\n| done          | Callback function     | Function | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\nlet from = \'my/repository/url\';\nHg.clone(from);\n\nlet to = {url:\'another/url\',username:\'user2\',password:\'pass2\',path:\'path2\'};\nHg.clone(from, to);\n\nHg.clone(from, null, (error, results) => {\n\tconsole.log(results);\n});\n\n```\n\n### Hg.create([to], [done = undefined])\n\nCreates and initialized a Mercurial repository\n\n| Argument      | Description           | Type     | Required | Default           |\n|---------------|-----------------------|----------|----------|-------------------|\n| to            |                       | Object   | No       |                   |\n| to.url        |                       | String   | No       | null              |\n| to.username   |                       | String   | No       | null              |\n| to.password   |                       | String   | No       | null              |\n| to.path       |                       | String   | No       | Current Directory |\n| done          | Callback function     | Function | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\nHg.create()\n\t.then((results) => {\n\t\tconsole.log(results);\n\t});\n\nlet to = {url: \'my/repository/url\', username: \'user\', password: \'pass\', path: \'path\'};\nHg.create(to);\n\nlet to = {url: \'someurl\', username: \'user\', password: \'pass\', path: \'path\'};\nHg.create(to,(error, results) => {\n\tconsole.log(results);\n});\n\n```\n\n### Hg.gitify([options], [done])\n\nCreate a git copy of this repository using the [gitifyhg](https://github.com/buchuki/gitifyhg) python package\n\n| Argument      | Description           | Type     | Required | Default           |\n|---------------|-----------------------|----------|----------|-------------------|\n| options       |                       | Object   | No       |                   |\n| options.gitRepoPath   |               | String   | No       | Base Directory / Current Hg repo name-git              |\n| done          | Callback function     | Function | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\nHg.gitify()\n\t.then((results) => {\n\t\tconsole.log(results);\n\t});\n\nHg.gitify({gitRepoPath: \'some/path/here\'}, (error, results) => {\n\tconsole.log(results);\n});\n\n```\n\n### Hg.version([done])\n\nGets the version of the installed mercurial package\n\n| Argument      | Description           | Type     | Required | Default           |\n|---------------|-----------------------|----------|----------|-------------------|\n| done          | Callback function     | Function | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n\n```javascript\nconst Hg = require(\'hg-plus\');\n\nHg.version()\n\t.then((version) => {\n\t\tconsole.log(version);\n\t});\n\nHg.version((error, results) => {\n\tconsole.log(results);\n});\n\n```\n\n### **HgRepo**\n\n### HgRepo([options],[pythonPath]) {\n\nHgRepo instance. \n\nMercurial repository wrapper to handle all the sub functions for mecurial repositories such as:\ninit,commit,add,push,pull,rename and merge\n\nNote: These are only created through Hg.clone or Hg.create\n\n| Argument      | Description           | Type     | Required | Default           |\n|---------------|-----------------------|----------|----------|-------------------|\n| to            |                       | Object   | No       |                   |\n| to.url        |                       | String   | No       | null              |\n| to.username   |                       | String   | No       | null              |\n| to.password   |                       | String   | No       | null              |\n| to.path       |                       | String   | No       | Current Directory |\n| pythonPath    | Path of python 2.7 installation. This is used for the gitify function | String    | No       | \'python\' |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| HgRepo Instance        |                  |\n\n*Example:*\n```javascript\nconst Hg = require(\'hg-plus\');\n\nlet repo = Hg.create();\n\nlet repo2 = Hg.clone(\'my/repository/url\');\n\n```\n\n### HgRepo.init([done]) {\n\nInits the Hg repo instance.\n\n| Argument      | Description           | Type     | Required | Default           |\n|---------------|-----------------------|----------|----------|-------------------|\n| done          | Callback function     | Function | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n```javascript\nconst Hg = require(\'hg-plus\');\n\nlet repo = Hg.create();\n\nrepo.init()\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.init((error, result) => {\n\tconsole.log(result);\n});\n\n```\n\n### HgRepo.commit(message, [options], [done]) {\n\nCommits new changes in the the Hg repo instance.\n\n| Argument      | Description           | Type     | Required | Default           |\n|---------------|-----------------------|----------|----------|-------------------|\n| message       | Commit message        | String   | Yes      | N/A               |\n| options       |                       | Object   | No       | N/A               |\n| options.add   |                       | Boolean  | No       | false             |\n| done          | Callback function     | Function | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n*Example:*\n```javascript\nrepo.commit(\'my commit message\')\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.commit(\'my commit message\', (error, result) => {\n\tconsole.log(result);\n});\n\n```\n\n### HgRepo.add([options], [done]) {\n\nAdds untracked files to the Hg repo instance.\n\n| Argument         | Description           | Type         | Required | Default           |\n|------------------|-----------------------|--------------|----------|-------------------|\n| options          |                       | Object       | No       | N/A               |\n| options.files    |                       | Array<String>| No       | All Files         |\n| options.include  |                       | String       | No       | null              |\n| options.exclude  |                       | String       | No       | null              |\n| options.subrepos |                       | Boolean      | No       | false             |\n| options.dryRun   |                       | Boolean      | No       | false             |\n| done             | Callback function     | Function     | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n```javascript\nrepo.add()\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.add([\'file.txt\',\'file2.js\'], (error, result) => {\n\tconsole.log(result);\n});\n\n```\n\n### HgRepo.push([options], [done]) {\n\nPushes untracked files to the Hg repo instance.\n\n| Argument         | Description           | Type         | Required | Default           |\n|------------------|-----------------------|--------------|----------|-------------------|\n| options          |                       | Object       | No       | N/A               |\n| options.force    |                       | Boolean      | No       | false             |\n| options.revision |                       | String       | No       | null              |\n| options.bookmark |                       | String       | No       | null              |\n| options.branch   |                       | String       | No       | null              |\n| options.ssh      |                       | String       | No       | null              |\n| options.insecure |                       | Boolean      | No       | false             |\n| done             | Callback function     | Function     | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n```javascript\nrepo.push()\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.push({force: true}, (error, result) => {\n\tconsole.log(result);\n});\n\n```\n\n### HgRepo.pull([options], [done]) {\n\nPulls files to the Hg repo instance.\n\n| Argument         | Description           | Type         | Required | Default           |\n|------------------|-----------------------|--------------|----------|-------------------|\n| source           |                       | String       | No       | this.url          |\n| options          |                       | Object       | No       | N/A               |\n| options.force    |                       | Boolean      | No       | false             |\n| options.update   |                       | Boolean      | No       | false              |\n| options.revision |                       | String       | No       | null              |\n| options.bookmark |                       | String       | No       | null              |\n| options.branch   |                       | String       | No       | null              |\n| options.ssh      |                       | String       | No       | null              |\n| options.insecure |                       | Boolean      | No       | false             |\n| done             | Callback function     | Function     | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n*Example:*\n```javascript\nrepo.pull()\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.pull({source: \'my/repository/url/\', force: true}, (error, result) => {\n\tconsole.log(result);\n});\n\n```\n\n### HgRepo.update([options], [done]) {\n\nUpdate Hg repo instance.\n\n| Argument         | Description           | Type         | Required | Default           |\n|------------------|-----------------------|--------------|----------|-------------------|\n| options          |                       | Object       | No       | N/A               |\n| options.clean    |                       | Boolean      | No       | false             |\n| options.check    |                       | Boolean      | No       | false              |\n| options.revision |                       | String       | No       | null              |\n| options.tool     |                       | Boolean      | No       | false             |\n| done             | Callback function     | Function     | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n*Example:*\n```javascript\nrepo.update()\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.update({clean: true}, (error, result) => {\n\tconsole.log(result);\n});\n\n```\n\n### HgRepo.gitify([{gitRepoPath}], [done]) {\n\nCoverts Hg repo instance into a Git repo using the [gitifyhg](https://github.com/buchuki/gitifyhg) python package\n\n| Argument         | Description           | Type         | Required | Default           |\n|------------------|-----------------------|--------------|----------|-------------------|\n| options          |                       | Object       | No       | N/A               |\n| options.gitRepoPath | New git repository path | Boolean | No       | Current base directory/current hg repo name-git            |\n| done             | Callback function     | Function     | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n\n*Example:*\n```javascript\nrepo.gitify()\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\n```\n\n### HgRepo.rename([options], [done]) {\n\nRename files to the Hg repo instance.\n\n| Argument         | Description           | Type         | Required | Default           |\n|------------------|-----------------------|--------------|----------|-------------------|\n| source           |                       | String       | Yes      | N/A               |\n| destination      |                       | String       | Yes      | N/A               |\n| options          |                       | Object       | No       | N/A               |\n| options.after    |                       | Boolean      | No       | false             |\n| options.force    |                       | Boolean      | No       | false             |\n| options.include  |                       | String       | No       | null              |\n| options.exclude  |                       | String       | No       | null              |\n| options.dryRun   |                       | Boolean      | No       | false             |\n| done             | Callback function     | Function     | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n*Example:*\n```javascript\nrepo.rename(\'one/path\',\'destination/path\')\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.rename(\'one/path\',\'destination/path\',{after: true}, (error, result) => {\n\tconsole.log(result);\n});\n\n```\n\n### HgRepo.merge([options], [done]) {\n\nRename files to the Hg repo instance.\n\n| Argument         | Description           | Type         | Required | Default           |\n|------------------|-----------------------|--------------|----------|-------------------|\n| options          |                       | Object       | No       | N/A               |\n| options.force    |                       | Boolean      | No       | false             |\n| options.preview  |                       | Boolean      | No       | false             |\n| options.revision |                       | String       | No       | null              |\n| options.tool     |                       | String       | No       | null              |\n| done             | Callback function     | Function     | No       | null              |\n\n| Returns                | Description      |\n|------------------------|------------------|\n| Promise &lt;String&gt; | Console output   |\n\n*Example:*\n```javascript\nrepo.merge()\n\t.then((result) => {\n\t\tconsole.log(result);\n\t});\n\nrepo.merge({force: true}, (error, result) => {\n\tconsole.log(result);\n});\n\n```\nTests \n=====\nFirst make sure to change the global variable in tests/HgRepo called pythonPath to be a valid\npath to your python2.7.x installation. Then run:\n\n```javascript\nnpm test\n```\n\nRelease Notes\n=============\n\nTODO\n=============\n1. Add tests for credentials handling\n\nLICENSE\n=======\n\n[MIT](http://opensource.org/licenses/MIT), No Attribution Required, Copyright 2016 Justin Dalrymple\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '80ae2e41269e8b010b480d841a576a463afd5d3a',
21 silly publish   bugs: { url: 'https://github.com/jdalrymple/node-hg-plus/issues' },
21 silly publish   homepage: 'https://github.com/jdalrymple/node-hg-plus#readme',
21 silly publish   _id: 'hg@0.5.0',
21 silly publish   _shasum: 'e0617eeb1d3e2c0c3f44d7def6f36d1c18a5ee98',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name hg
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'hg',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'hg',
26 silly mapToRegistry   name: 'hg',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/hg
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /home/jekyll/.npm/hg/0.5.0/package.tgz
30 verbose request uri https://registry.npmjs.org/hg
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 6:32:23 PM
33 verbose request using bearer token for auth
34 verbose request id 17e52de6cba40d4d
35 http request PUT https://registry.npmjs.org/hg
36 http 403 https://registry.npmjs.org/hg
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '96',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sat, 21 Jan 2017 23:32:20 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-jfk8122-JFK',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1485041538.759018,VS0,VE1702',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /home/jekyll/.npm/registry.npmjs.org/hg on PUT
39 error publish Failed PUT 403
40 verbose stack Error: you do not have permission to publish "hg". Are you logged in as the correct user? : hg
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid hg
43 verbose cwd /home/jekyll/Documents/Projects/node-hg-plus
44 error Linux 4.8.13-1-ARCH
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
46 error node v7.3.0
47 error npm  v3.10.10
48 error code E403
49 error you do not have permission to publish "hg". Are you logged in as the correct user? : hg
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
