'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LF = '\n';
var CR = '\r';

var LinesAndColumns = function () {
  function LinesAndColumns(string) {
    _classCallCheck(this, LinesAndColumns);

    this._string = string;

    var offsets = [0];

    for (var offset = 0; offset < string.length;) {
      switch (string[offset]) {
        case LF:
          offset += LF.length;
          offsets.push(offset);
          break;

        case CR:
          offset += CR.length;
          if (string[offset] === LF) {
            offset += LF.length;
          }
          offsets.push(offset);
          break;

        default:
          offset++;
          break;
      }
    }

    this._offsets = offsets;
  }

  _createClass(LinesAndColumns, [{
    key: 'locationForIndex',
    value: function locationForIndex(index) {
      if (index < 0 || index > this._string.length) {
        return null;
      }

      var line = 0;
      var offsets = this._offsets;

      while (offsets[line + 1] <= index) {
        line++;
      }

      var column = index - offsets[line];
      return { line: line, column: column };
    }
  }, {
    key: 'indexForLocation',
    value: function indexForLocation(location) {
      var line = location.line;
      var column = location.column;


      if (line < 0 || line >= this._offsets.length) {
        return null;
      }

      if (column < 0 || column > this._lengthOfLine(line)) {
        return null;
      }

      return this._offsets[line] + column;
    }

    /**
     * @private
     */

  }, {
    key: '_lengthOfLine',
    value: function _lengthOfLine(line) {
      var offset = this._offsets[line];
      var nextOffset = line === this._offsets.length - 1 ? this._string.length : this._offsets[line + 1];
      return nextOffset - offset;
    }
  }]);

  return LinesAndColumns;
}();

module.exports = LinesAndColumns;