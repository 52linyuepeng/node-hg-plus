import MagicString from 'magic-string';
import traverse from 'babel-traverse';
import { parse } from 'babylon';

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

















var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var TraverseState = function () {
  function TraverseState(scope) {
    var parentState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    classCallCheck(this, TraverseState);
    this.bindingIdentifiers = new Set();
    this.names = new Set();

    this.scope = scope;
    this.parentState = parentState;
  }

  createClass(TraverseState, [{
    key: 'addBindingIdentifier',
    value: function addBindingIdentifier(node) {
      if (this.hasName(node.name)) {
        return false;
      }
      this.bindingIdentifiers.add(node);
      this.names.add(node.name);
      return true;
    }
  }, {
    key: 'hasName',
    value: function hasName(name) {
      var state = this;
      do {
        if (state.hasOwnName(name)) {
          return true;
        }
      } while (state = state.parentState);
      return false;
    }
  }, {
    key: 'hasOwnName',
    value: function hasOwnName(name) {
      return !!this.scope.getBinding(name) || this.names.has(name);
    }
  }]);
  return TraverseState;
}();

function getIndentForLineContainingOffset(source, offset) {
  var lastNewlineIndex = source.lastIndexOf('\n', offset);

  for (var i = lastNewlineIndex + 1; i < source.length; i++) {
    switch (source[i]) {
      case ' ':
      case '\t':
        break;

      default:
        return source.slice(lastNewlineIndex + 1, i);
    }
  }

  return source.slice(lastNewlineIndex + 1);
}

function buildDeclarationForNames(names, source, offset) {
  var nameList = names.sort(function (a, b) {
    return a.localeCompare(b);
  }).join(', ');
  var indent = getIndentForLineContainingOffset(source, offset);
  return 'var ' + nameList + ';\n' + indent;
}

function getFirstStatementInBlock(node) {
  switch (node.type) {
    case 'BlockStatement':
    case 'Program':
      return node.body[0];

    case 'FunctionDeclaration':
    case 'FunctionExpression':
    case 'ForStatement':
    case 'ObjectMethod':
    case 'ClassMethod':
      return getFirstStatementInBlock(node.body);

    case 'ArrowFunctionExpression':
      if (node.body.type === 'BlockStatement') {
        return getFirstStatementInBlock(node.body);
      } else {
        return null;
      }

    default:
      return null;
  }
}

function flatMap(list, map) {
  return list.reduce(function (memo, item) {
    return memo.concat(map(item));
  }, []);
}

/**
 * Gets the names to be bound in the LHS of an assignment.
 *
 *   a = 1;                         // [ 'a' ]
 *   ({ b, c } = {});               // [ 'b', 'c' ]
 *   [ d, e ] = [];                 // [ 'd', 'e' ]
 *   ({ f: g, h: [ i, j ] } = {});  // [ 'g', 'i', 'j' ]
 */
function getBindingIdentifiersFromLHS(node) {
  switch (node.type) {
    case 'Identifier':
      return [node];

    case 'ObjectPattern':
      return flatMap(node.properties, function (property) {
        return getBindingIdentifiersFromLHS(property.value);
      });

    case 'ArrayPattern':
      return flatMap(node.elements, getBindingIdentifiersFromLHS);

    default:
      return [];
  }
}

function getParenthesesRanges(node, tokens) {
  var leftParenTokens = [];
  var rightParenTokens = [];

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (token.start === node.start) {
      for (var j = i - 1; j >= 0; j--) {
        if (tokens[j].type.label === '(') {
          leftParenTokens.unshift(tokens[j]);
        } else {
          break;
        }
      }
    } else if (token.end === node.end) {
      for (var _j = i + 1; _j < tokens.length; _j++) {
        if (tokens[_j].type.label === ')') {
          rightParenTokens.push(tokens[_j]);
        } else {
          break;
        }
      }
      break;
    }
  }

  if (leftParenTokens.length === 0 || leftParenTokens.length !== rightParenTokens.length) {
    return [];
  }

  return [{
    start: leftParenTokens[0].start,
    end: leftParenTokens[leftParenTokens.length - 1].end
  }, {
    start: rightParenTokens[0].start,
    end: rightParenTokens[rightParenTokens.length - 1].end
  }];
}

/**
 * Determines if any assignments are to properties or other non-identifiers. If
 * so, then it's illegal to put `var` to the left of the assignment.
 *
 *   a = 1;                         // false
 *   ({ b, c } = {});               // false
 *   [ d, e.f ] = [];               // true
 */
function lhsHasNonIdentifierAssignment(node) {
  switch (node.type) {
    case 'Identifier':
      return false;

    case 'ObjectPattern':
      return node.properties.some(function (property) {
        return lhsHasNonIdentifierAssignment(property.value);
      });

    case 'ArrayPattern':
      return node.elements.some(lhsHasNonIdentifierAssignment);

    default:
      return true;
  }
}

var BABYLON_PLUGINS = ['flow', 'jsx', 'asyncFunctions', 'asyncGenerators', 'classConstructorCall', 'classProperties', 'decorators', 'doExpressions', 'exponentiationOperator', 'exportExtensions', 'functionBind', 'functionSent', 'objectRestSpread', 'trailingFunctionCommas'];

function addVariableDeclarations(source) {
  var editor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new MagicString(source);
  var ast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : parse(source, { plugins: BABYLON_PLUGINS, sourceType: 'module' });

  var state = null;
  var seen = new Set();
  var deferredInlinePositions = [];

  traverse(ast, {
    /**
     * Adds `var` for assignments, either in place or at the top of the scope.
     *
     *   a = 1;      // can add `var` inline
     *   b(c = 2);   // needs standalone `var` at the top of scope
     */
    AssignmentExpression: function AssignmentExpression(path) {
      var node = path.node;


      if (node.operator !== '=') {
        // Ignore e.g. `+=`.
        return;
      }

      if (seen.has(node)) {
        // We've already processed this one.
        return;
      }

      var state = getState();
      var identifiers = getBindingIdentifiersFromLHS(node.left);
      var newIdentifiers = identifiers.filter(function (identifier) {
        return state.addBindingIdentifier(identifier);
      });
      var canInsertVar = !lhsHasNonIdentifierAssignment(node.left) && (path.parent.type === 'ExpressionStatement' || path.parent.type === 'ForStatement' && node === path.parent.init);

      if (newIdentifiers.length === 0) {
        return;
      }

      if (canInsertVar && newIdentifiers.length === identifiers.length) {
        getParenthesesRanges(node, ast.tokens).forEach(function (_ref) {
          var start = _ref.start;
          var end = _ref.end;
          return editor.remove(start, end);
        });
        deferredInlinePositions.push(node.start);
      } else {
        var insertionScope = path.scope;
        var firstStatement = void 0;
        do {
          firstStatement = getFirstStatementInBlock(insertionScope.block);
          insertionScope = insertionScope.parent;
        } while (!firstStatement);
        if (firstStatement) {
          editor.insertLeft(firstStatement.start, buildDeclarationForNames(newIdentifiers.map(function (_ref2) {
            var name = _ref2.name;
            return name;
          }), source, firstStatement.start));
        }
      }
    },


    /**
     * Adds `var` to `for-in` and `for-of` loops, e.g.
     *
     *   for (key in object) {
     *     …
     *   }
     *
     *   for (item of list) {
     *     …
     *   }
     */
    ForXStatement: function ForXStatement(path) {
      var state = getState();
      var node = path.node;

      var identifiers = getBindingIdentifiersFromLHS(node.left);
      var newIdentifiers = identifiers.filter(function (name) {
        return state.addBindingIdentifier(name);
      });

      if (newIdentifiers.length === 0) {
        return;
      }

      if (newIdentifiers.length === identifiers.length) {
        deferredInlinePositions.push(node.left.start);
      } else {
        var firstStatement = getFirstStatementInBlock(path.parentPath.scope.block);
        if (firstStatement) {
          editor.insertLeft(firstStatement.start, buildDeclarationForNames(newIdentifiers.map(function (_ref3) {
            var name = _ref3.name;
            return name;
          }), source, firstStatement.start));
        }
      }
    },


    /**
     * Optimizes for the case where there are multiple assignments in one
     * sequence of expressions, e.g.
     *
     *   for (i = 0, length = list.length; i < length; i++) {
     *     …
     *   }
     */
    SequenceExpression: function SequenceExpression(path) {
      var state = getState();
      var node = path.node;

      var names = [];

      for (var i = 0; i < node.expressions.length; i++) {
        var expression = node.expressions[i];
        if (expression.type !== 'AssignmentExpression') {
          return;
        }

        var identifiers = getBindingIdentifiersFromLHS(expression.left);
        if (identifiers.length === 0) {
          return;
        }

        names.push.apply(names, toConsumableArray(identifiers.map(function (identifier) {
          return identifier.name;
        })));
      }

      var newNames = names.filter(function (name) {
        return !state.hasName(name);
      });

      if (newNames.length !== names.length) {
        return;
      }

      node.expressions.forEach(function (expression) {
        return seen.add(expression);
      });
      deferredInlinePositions.push(node.start);
    },


    Scope: {
      enter: function enter(path) {
        state = new TraverseState(path.scope, state);
      },
      exit: function exit() {
        state = state ? state.parentState : null;
      }
    }
  });

  function getState() {
    if (!state) {
      throw new Error('BUG: state is not set');
    } else {
      return state;
    }
  }

  deferredInlinePositions.forEach(function (position) {
    return editor.insertLeft(position, 'var ');
  });

  return {
    code: editor.toString(),
    map: editor.generateMap()
  };
}

export default addVariableDeclarations;
